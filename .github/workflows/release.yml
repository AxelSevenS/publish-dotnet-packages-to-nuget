name: Publish Release

on:
  workflow_call:
    inputs:
      projects:
        description: 'List of project names to build and publish (formatted as JSON array, e.g. `["ProjectA", "ProjectB"]`)'
        required: true
        type: string
      release-upload-url:
        description: 'Release upload URL for the GitHub release where the package will be uploaded'
        required: true
        type: string
      global-json-file:
        description: 'Optional global.json location, if your global.json isn''t located in the root of the repo.'
        required: false
        type: string
      skip-duplicate:
        description: 'Whether or not to allow pushing a duplicate package without failing the job'
        required: false
        default: false
        type: boolean
    secrets:
      NUGET_API_KEY:
        required: true

jobs:
  setup:
    name: Validate input
    runs-on: ubuntu-latest

    steps:
    - name: Validate projects input
      run: |
        echo '${{ inputs.projects }}' | jq . > /dev/null || (echo "Error: 'projects' input is not valid JSON." && exit 1)

  build-and-publish:
    name: Publish ${{ matrix.project }} Release
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        project: ${{ fromJson(inputs.projects) }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: ${{ inputs.global-json-file }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Find project file
      id: get-project
      run: |
        project=$(find ${{ matrix.project }} -type f -name "*.csproj" | head -n 1)
        echo "path=$project" >> "$GITHUB_OUTPUT"

    - name: Get project version
      uses: bbonkr/get-version-action@v1
      id: get-version
      with:
        project: ${{ steps.get-project.outputs.path }}
        show_log_message: true

    - name: Build NuGet Package
      id: build-nupkg
      run: |
        dotnet build \
          --configuration Release \
          --output ./${{ matrix.project }}/nupkg \
          ${{ steps.get-project.outputs.path }}
        nupkg_dir="./${{ matrix.project }}/nupkg"
        nupkg_file="${{ matrix.project }}.${{ steps.get-version.outputs.version }}.nupkg"
        nupkg_path="$nupkg_dir/$nupkg_file"
        echo "name=$nupkg_file" >> "$GITHUB_OUTPUT"
        echo "path=$nupkg_path" >> "$GITHUB_OUTPUT"

    - name: Publish to Nuget
      id: nuget-push
      if: fileExists(${{ steps.build-nupkg.outputs.path }})
      continue-on-error: ${{ inputs.skip-duplicate }}
      run: |
        set -e
        dotnet nuget push "${{ steps.build-nupkg.outputs.path }}" \
          --api-key "${{ secrets.NUGET_API_KEY }}" \
          --source "https://api.nuget.org/v3/index.json" \
          ${{ inputs.skip-duplicate && '--skip-duplicate' || '' }}

    - name: Publish asset to Release
      uses: actions/upload-release-asset@v1
      if: fileExists(${{ steps.build-nupkg.outputs.path }})
      continue-on-error: ${{ inputs.skip-duplicate }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ inputs.release-upload-url }}
        asset_path: ${{ steps.build-nupkg.outputs.path }}
        asset_name: ${{ steps.build-nupkg.outputs.name }}
        asset_content_type: application/x-nupkg